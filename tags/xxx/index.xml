<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>xxx - Tag - Yongbo&#39;s Blog</title>
        <link>https://Ellioben.github.io/tags/xxx/</link>
        <description>xxx - Tag - Yongbo&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>xieyongbo@tom.com (XieYongbo/Ellioben)</managingEditor>
            <webMaster>xieyongbo@tom.com (XieYongbo/Ellioben)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 21 Oct 2022 08:37:23 &#43;0800</lastBuildDate><atom:link href="https://Ellioben.github.io/tags/xxx/" rel="self" type="application/rss+xml" /><item>
    <title>Closure</title>
    <link>https://Ellioben.github.io/closure%E9%97%AD%E5%8C%85/</link>
    <pubDate>Fri, 21 Oct 2022 08:37:23 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://Ellioben.github.io/closure%E9%97%AD%E5%8C%85/</guid>
    <description><![CDATA[闭包 闭包就是一个函数和与其相关的引用环境组合的一个整体
闭包就是返回的匿名函数+匿名函数以外的变量sum
感受：匿名函数中引用的那个变量会一直保存在内存中，可以一直使用
函数在创建的时候会创建两个对象，一个是函数对象本身，另一个是作用域链对象 函数在调用的时候会创建一个执行环境对象（活动对象）
返回值是内存函数（实际是内层函数地址） 内层函数涉及到方法中的i 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import &#34;fmt&#34; func main() { f := getSum() fmt.Println(getSum()) fmt.Println(f(100)) fmt.Println(f(2)) fmt.Println(f(3)) } func getSum() func(int) int { var sum = 0 return func(num int) int { sum = num+sum return sum } } //===-== 0x49aa70 100 102 105 注意 1、中使用的变量/参数会一直保存在内存中，所以会一直使用&mdash;&gt;意味着闭包不可滥用]]></description>
</item>
<item>
    <title>Start...</title>
    <link>https://Ellioben.github.io/demo/</link>
    <pubDate>Tue, 07 Sep 2021 16:40:32 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://Ellioben.github.io/demo/</guid>
    <description><![CDATA[第一个博客文的碎碎念 💭]]></description>
</item>
</channel>
</rss>
