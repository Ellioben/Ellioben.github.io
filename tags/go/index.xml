<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>go - Tag - Yongbo&#39;s Blog</title>
        <link>https://Ellioben.github.io/tags/go/</link>
        <description>go - Tag - Yongbo&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>xieyongbo@tom.com (XieYongbo/Ellioben)</managingEditor>
            <webMaster>xieyongbo@tom.com (XieYongbo/Ellioben)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 21 Oct 2022 08:38:28 &#43;0800</lastBuildDate><atom:link href="https://Ellioben.github.io/tags/go/" rel="self" type="application/rss+xml" /><item>
    <title>Go的MPG模型</title>
    <link>https://Ellioben.github.io/go%E7%9A%84mpg%E6%A8%A1%E5%9E%8B/</link>
    <pubDate>Fri, 21 Oct 2022 08:38:28 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://Ellioben.github.io/go%E7%9A%84mpg%E6%A8%A1%E5%9E%8B/</guid>
    <description><![CDATA[在操作系统提供的内核线程之上，Go搭建了一个特有的两级线程模型。goroutine机制实现了M:N的线程模型，goroutine机制是协程（coroutine）的一种实现，golang内置的调度器，可以让多核CPU中每个CPU执行一个协程。
调度器是如何工作的 有了上面的认识，可以开始真正的介绍Go的并发机制了，先用一段代码展示一下在Go语言中新建一个“线程“（Go语言中称为Goroutine）的样子：
1 2 3 4 5 //1用go关键字加上一个函数（这里用了匿名函数） //调用就做到了在一个新的“线程”并发执行任务 go func() { }() 理解goroutine机制的原理，关键是理解Go语言scheduler的实现。
Go语言中支撑整个scheduler实现的主要有4个重要结构，分别是M、P、G、Sched，前三个定义在runtime.h中，Sched定义在proc.c中。]]></description>
</item>
</channel>
</rss>
